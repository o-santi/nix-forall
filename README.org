* Nix Forall

Nix FFI for all languages. Currently, it's very much in alpha quality, providing libraries for python and rust.

** Nix For Python

In order to use =nix-for-py=, you need to use the overlay exposed in the flake:
#+begin_src nix
pkgs = import nixpkgs {
  overlays = [ nix-forall.overlays.${system}.default ];
};
#+end_src
and then create a python instance with it:
#+begin_src nix
pkgs.mkShell {
  buildInputs = [
    (pkgs.python3.withPackages (p: [ p.nix-for-py ]))
  ];
};
#+end_src

** Nix For Rust

Use [[https://nixos.org/][nix]] values from Rust, as if they were native, and vice-versa. This crate offers a powerful way to interoperate with Nix values as idiomatically as possible, through the recently added [[https://github.com/NixOS/nix/pull/8699][Nix C-Api]]:
#+begin_src rust
use nix_for_rust::{settings::NixSettings, term::AttrSet};

pub fn main() -> anyhow::Result<()> {
  let mut state = NixSettings::empty().with_default_store()?;
  let valid_pkgs = state.eval_from_string("import <nixpkgs>", std::env::current_dir()?)?
    .call_with(AttrSet::default())?
    .items()?
    .filter_map(|(_name, term)| term.ok())
    .count();
  println!("{valid_pkgs}");
  Ok(())
}
#+end_src
and when ran, it should give you the following output.

#+begin_src sh
$ nix run
20716
#+end_src

#+begin_quote
This crate uses [[https://github.com/oxalica/nocargo][nocargo]] to build directly through nix, without the use of cargo. If you want to use cargo, you may drop in the shell (through ~nix develop~).
#+end_quote
